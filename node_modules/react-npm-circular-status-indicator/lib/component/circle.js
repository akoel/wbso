'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Circle = function (_Component) {
  _inherits(Circle, _Component);

  function Circle() {
    _classCallCheck(this, Circle);

    return _possibleConstructorReturn(this, (Circle.__proto__ || Object.getPrototypeOf(Circle)).apply(this, arguments));
  }

  _createClass(Circle, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var ctx = _reactDom2.default.findDOMNode(this).getContext('2d');
      var radius = (this.props.size - 10) / 2;
      //this.drawCircle(ctx,'#efefef', 10, 100 / 100,radius,this.props.size);
      this.drawAnimatedCircle(ctx, this.props.color, 10, this.props.children, radius, 0, this.props.size);
    }
    // drawCircle(ctx,color, lineWidth, percent,radius,size) {
    //   percent = Math.min(Math.max(0, percent || 1), 1);
    //   ctx.beginPath();
    //   ctx.arc(size/2,size/2, radius, 0, Math.PI * 2 * percent, false);
    //   ctx.strokeStyle = color;
    //   ctx.lineWidth = lineWidth;
    //   ctx.stroke();
    // }

  }, {
    key: 'drawAnimatedCircle',
    value: function drawAnimatedCircle(ctx, color, lineWidth, percent, radius, curPerc, size) {
      var _this2 = this;

      ctx.clearRect(0, 0, size, size);
      this.drawCircleArc(ctx, color, lineWidth, curPerc, radius, size);
      curPerc++;
      if (curPerc <= percent) {
        requestAnimationFrame(function () {
          _this2.drawAnimatedCircle(ctx, color, lineWidth, percent, radius, curPerc, size);
        });
      }
    }
  }, {
    key: 'drawCircleArc',
    value: function drawCircleArc(ctx, color, lineWidth, curr, radius, size) {
      var startAngle = 0;
      var endAngle = curr * 2 * Math.PI / 100;
      ctx.lineWidth = lineWidth;
      ctx.strokeStyle = color;
      ctx.beginPath();
      ctx.arc(size / 2, size / 2, radius, startAngle, endAngle, false);
      ctx.stroke();
    }
  }, {
    key: 'render',
    value: function render() {
      var canvasStyle = {
        'display': 'block',
        'position': 'absolute',
        'top': 0,
        'left': 0
      };
      return _react2.default.createElement('canvas', { width: this.props.size, height: this.props.size, style: canvasStyle });
    }
  }]);

  return Circle;
}(_react.Component);

exports.default = Circle;