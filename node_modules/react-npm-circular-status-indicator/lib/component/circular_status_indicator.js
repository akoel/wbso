'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _circle = require('./circle');

var _circle2 = _interopRequireDefault(_circle);

var _reactIf = require('react-if');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CircularStatusIndicator = function (_Component) {
  _inherits(CircularStatusIndicator, _Component);

  function CircularStatusIndicator() {
    _classCallCheck(this, CircularStatusIndicator);

    return _possibleConstructorReturn(this, (CircularStatusIndicator.__proto__ || Object.getPrototypeOf(CircularStatusIndicator)).apply(this, arguments));
  }

  _createClass(CircularStatusIndicator, [{
    key: 'render',
    value: function render() {
      var size = 100;
      if (this.props.radius) {
        size = this.props.radius;
      }
      var color = this.getBarColor(this.props);
      var sizeAttribute = size + 'px';
      var divStyle = {
        'display': 'table',
        'position': 'relative',
        'margin': 'auto',
        'width': sizeAttribute,
        'height': sizeAttribute
      };
      var spanWrapperStyle = {
        'display': 'table-cell',
        'verticalAlign': 'middle'
      };
      var SpanStyle = {
        'textAlign': 'center',
        'display': 'block',
        'width': size + 'px',
        'fontSize': 15 * size / 100 + 'px'
      };
      var textLabelFlag = this.props.textLabel ? true : false;

      return _react2.default.createElement(
        'div',
        { style: divStyle, id: 'circular-bar' },
        _react2.default.createElement(
          'div',
          { style: spanWrapperStyle },
          _react2.default.createElement(
            _reactIf.If,
            { condition: textLabelFlag },
            _react2.default.createElement(
              _reactIf.Then,
              null,
              _react2.default.createElement(
                'span',
                { style: SpanStyle },
                this.props.textLabel
              )
            )
          ),
          _react2.default.createElement(
            'span',
            { style: SpanStyle },
            this.props.children + '%'
          )
        ),
        _react2.default.createElement(
          _circle2.default,
          { size: size, color: color },
          this.props.children
        )
      );
    }
  }, {
    key: 'getBarColor',
    value: function getBarColor(props) {
      var barColor = null;
      if (props.colour) {
        barColor = props.colour;
      } else {
        if (props.inverted) {
          if (props.children <= 25) {
            barColor = '#5cb85c';
          } else if (props.children > 25 && props.children <= 50) {
            barColor = '#337ab7';
          } else if (props.children > 50 && props.children <= 75) {
            barColor = '#ffff00';
          } else {
            barColor = '#d9534f';
          }
        } else {
          if (props.children <= 25) {
            barColor = '#d9534f';
          } else if (props.children > 25 && props.children <= 50) {
            barColor = '#ffff00';
          } else if (props.children > 50 && props.children <= 75) {
            barColor = '#337ab7';
          } else {
            barColor = '#5cb85c';
          }
        }
      }
      return barColor;
    }
  }]);

  return CircularStatusIndicator;
}(_react.Component);

exports.default = CircularStatusIndicator;