require('./setup')('<html><body></body></html>');

import React,{Component} from 'react';
import ReactDOM from 'react-dom';
import Expect from 'expect';
import ReactTestUtils,{createRenderer} from 'react-addons-test-utils';
import ExpectJSX from 'expect-jsx';
Expect.extend(ExpectJSX);

import CircularStatusIndicator from '../src/component/circular_status_indicator';

describe('CircularStatusIndicator', () => {
  it('Test:1-Circle Chart with percentage > 75', () => {
    let renderer = createRenderer();
    renderer.render(<CircularStatusIndicator>78</CircularStatusIndicator>);
    let result = renderer.getRenderOutput();
    Expect(result.props.children[1].props.color).toEqual('#5cb85c');
  });
  it('Test:2-Circle Chart with percentage > 50', () => {
    let renderer = createRenderer();
    renderer.render(<CircularStatusIndicator>58</CircularStatusIndicator>);
    let result = renderer.getRenderOutput();
    Expect(result.props.children[1].props.color).toEqual('#337ab7');
  });
  it('Test:3-Circle Chart with percentage > 25', () => {
    let renderer = createRenderer();
    renderer.render(<CircularStatusIndicator>38</CircularStatusIndicator>);
    let result = renderer.getRenderOutput();
    Expect(result.props.children[1].props.color).toEqual('#ffff00');
  });
  it('Test:4-Circle Chart with percentage < 25', () => {
    let renderer = createRenderer();
    renderer.render(<CircularStatusIndicator>18</CircularStatusIndicator>);
    let result = renderer.getRenderOutput();
    Expect(result.props.children[1].props.color).toEqual('#d9534f');
  });
  it('Test:5-Circle Chart with inverted props percentage > 75', () => {
    let renderer = createRenderer();
    renderer.render(<CircularStatusIndicator inverted={true}>78</CircularStatusIndicator>);
    let result = renderer.getRenderOutput();
    Expect(result.props.children[1].props.color).toEqual('#d9534f');
  });
  it('Test:6-Circle Chart with inverted props percentage > 50', () => {
    let renderer = createRenderer();
    renderer.render(<CircularStatusIndicator inverted={true}>58</CircularStatusIndicator>);
    let result = renderer.getRenderOutput();
    Expect(result.props.children[1].props.color).toEqual('#ffff00');
  });
  it('Test:7-Circle Chart with inverted props percentage > 25', () => {
    let renderer = createRenderer();
    renderer.render(<CircularStatusIndicator inverted={true}>38</CircularStatusIndicator>);
    let result = renderer.getRenderOutput();
    Expect(result.props.children[1].props.color).toEqual('#337ab7');
  });
  it('Test:8-Circle Chart with inverted props percentage < 25', () => {
    let renderer = createRenderer();
    renderer.render(<CircularStatusIndicator inverted={true}>18</CircularStatusIndicator>);
    let result = renderer.getRenderOutput();
    Expect(result.props.children[1].props.color).toEqual('#5cb85c');
  });
  it('Test:9-Circle Chart with textLabel and radius props', () => {
    let renderer = createRenderer();
    renderer.render(<CircularStatusIndicator radius={200} textLabel={'Diesel'}>78</CircularStatusIndicator>);
    let result = renderer.getRenderOutput();
    Expect(result.props.children[0].props.children[0].props.children.props.children.props.children).toEqual('Diesel');
    Expect(result.props.children[0].props.children[0].props.children.props.children.props.style.fontSize).toEqual('30px');
    Expect(result.props.children[0].props.children[0].props.condition).toEqual(true);
    Expect(result.props.children[0].props.children[1].props.children).toEqual('78%');
    Expect(result.props.children[1].props.size).toEqual(200);
  });
  it('Test:10-Canvas', () => {
    let component = ReactTestUtils.renderIntoDocument(<CircularStatusIndicator>78</CircularStatusIndicator>);
    let canvas = ReactTestUtils.findRenderedDOMComponentWithTag(component,'canvas');
    Expect(canvas).toExist();
  });
});

