(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react);
    global.ReactIf = mod.exports;
  }
})(this, function (exports, _react) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.If = exports.Else = exports.Then = undefined;

  var _react2 = _interopRequireDefault(_react);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _isArray = function _isArray(arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
  };
  var isArray = Array.isArray || _isArray;

  var makeBranch = function makeBranch(name) {
    var Branch = _react2.default.createClass({
      displayName: name,

      propTypes: {
        children: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.func, _react2.default.PropTypes.string, _react2.default.PropTypes.number, _react2.default.PropTypes.object])
      },

      render: function render() {
        if (typeof this.props.children === 'function') {
          return this.props.children();
        } else {
          return this.props.children || null;
        }
      }
    });

    Branch.isInstance = function (obj) {
      return obj.type === Branch;
    };

    return Branch;
  };

  var Then = exports.Then = makeBranch('Then');
  var Else = exports.Else = makeBranch('Else');

  var PropTypes = _react2.default.PropTypes;
  var IfOrElse = PropTypes.oneOfType([PropTypes.object, PropTypes.instanceOf(Then), PropTypes.instanceOf(Else)]);

  var If = exports.If = _react2.default.createClass({
    displayName: 'If',


    propTypes: {
      condition: PropTypes.bool.isRequired,
      children: PropTypes.oneOfType([PropTypes.arrayOf(IfOrElse), IfOrElse])
    },

    render: function render() {
      if (this.props.condition) {
        return this.renderChildOfType(Then);
      }

      return this.renderChildOfType(Else);
    },
    renderChildOfType: function renderChildOfType(Type) {
      if (this.props.children == null) {
        return null;
      }

      var childs = this.props.children;
      childs = isArray(childs) ? childs : [childs];
      childs = Type === Else ? childs.filter(Type.isInstance) : childs.filter(function (c) {
        return c.type !== Else;
      });

      if (childs.length > 0) {
        return childs[0];
      }

      return null;
    }
  });

  If.Then = Then;
  If.Else = Else;

  exports.default = If;
});